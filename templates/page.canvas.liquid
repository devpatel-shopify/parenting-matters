{% layout none %}
{%- liquid
  assign body_font_bold = settings.type_body_font | font_modify: 'weight', 'bold'
  assign body_font_italic = settings.type_body_font | font_modify: 'style', 'italic'
  assign body_font_bold_italic = body_font_bold | font_modify: 'style', 'italic'
%}

{% style %}
  {{ settings.type_body_font | font_face: font_display: 'swap' }}
  {{ body_font_bold | font_face: font_display: 'swap' }}
  {{ body_font_italic | font_face: font_display: 'swap' }}
  {{ body_font_bold_italic | font_face: font_display: 'swap' }}
  {{ settings.type_header_font | font_face: font_display: 'swap' }}


  @font-face {
      font-family: 'Switzer';
      src: url({{ 'Switzer-Extrabold.woff2' | asset_url }}) format('woff2'),
          url({{ 'Switzer-Extrabold.woff' | asset_url }}) format('woff');
      font-weight: bold;
      font-style: normal;
      font-display: swap;
  }

  @font-face {
      font-family: 'Switzer';
      src: url({{ 'Switzer-Light.woff2' | asset_url }}) format('woff2'),
          url({{ 'Switzer-Light.woff' | asset_url }}) format('woff');
      font-weight: 300;
      font-style: normal;
      font-display: swap;
  }

  @font-face {
      font-family: 'Switzer';
      src: url({{ 'Switzer-Italic.woff2' | asset_url }}) format('woff2'),
          url({{ 'Switzer-Italic.woff' | asset_url }}) format('woff');
      font-weight: normal;
      font-style: italic;
      font-display: swap;
  }

  @font-face {
      font-family: 'Switzer';
      src: url({{ 'Switzer-BlackItalic.woff2' | asset_url }}) format('woff2'),
          url({{ 'Switzer-BlackItalic.woff' | asset_url }}) format('woff');
      font-weight: 900;
      font-style: italic;
      font-display: swap;
  }

  @font-face {
      font-family: 'Switzer';
      src: url({{ 'Switzer-Medium.woff2' | asset_url }}) format('woff2'),
          url({{ 'Switzer-Medium.woff' | asset_url }}) format('woff');
      font-weight: 500;
      font-style: normal;
      font-display: swap;
  }

  @font-face {
      font-family: 'Switzer';
      src: url({{ 'Switzer-Extralight.woff2' | asset_url }}) format('woff2'),
          url({{ 'Switzer-Extralight.woff' | asset_url }}) format('woff');
      font-weight: 200;
      font-style: normal;
      font-display: swap;
  }

  @font-face {
      font-family: 'Switzer';
      src: url({{ 'Switzer-ExtralightItalic.woff2' | asset_url }}) format('woff2'),
          url({{ 'Switzer-ExtralightItalic.woff' | asset_url }}) format('woff');
      font-weight: 200;
      font-style: italic;
      font-display: swap;
  }

  @font-face {
      font-family: 'Switzer';
      src: url({{ 'Switzer-BoldItalic.woff2' | asset_url }}) format('woff2'),
          url({{ 'Switzer-BoldItalic.woff' | asset_url }}) format('woff');
      font-weight: bold;
      font-style: italic;
      font-display: swap;
  }

  @font-face {
      font-family: 'Switzer';
      src: url({{ 'Switzer-ExtraboldItalic.woff2' | asset_url }}) format('woff2'),
          url({{ 'Switzer-ExtraboldItalic.woff' | asset_url }}) format('woff');
      font-weight: bold;
      font-style: italic;
      font-display: swap;
  }

  @font-face {
      font-family: 'Switzer';
      src: url({{ 'Switzer-Black.woff2' | asset_url }}) format('woff2'),
          url({{ 'Switzer-Black.woff' | asset_url }}) format('woff');
      font-weight: 900;
      font-style: normal;
      font-display: swap;
  }

  @font-face {
      font-family: 'Switzer';
      src: url({{ 'Switzer-Bold.woff2' | asset_url }}) format('woff2'),
          url({{ 'Switzer-Bold.woff' | asset_url }}) format('woff');
      font-weight: bold;
      font-style: normal;
      font-display: swap;
  }

  @font-face {
      font-family: 'Switzer';
      src: url({{ 'Switzer-LightItalic.woff2' | asset_url }}) format('woff2'),
          url({{ 'Switzer-LightItalic.woff' | asset_url }}) format('woff');
      font-weight: 300;
      font-style: italic;
      font-display: swap;
  }

  @font-face {
      font-family: 'Switzer';
      src: url({{ 'Switzer-MediumItalic.woff2' | asset_url }}) format('woff2'),
          url({{ 'Switzer-MediumItalic.woff' | asset_url }}) format('woff');
      font-weight: 500;
      font-style: italic;
      font-display: swap;
  }

  @font-face {
      font-family: 'Switzer';
      src: url({{ 'Switzer-Semibold.woff2' | asset_url }}) format('woff2'),
          url({{ 'Switzer-Semibold.woff' | asset_url }}) format('woff');
      font-weight: 600;
      font-style: normal;
      font-display: swap;
  }

  @font-face {
      font-family: 'Switzer';
      src: url({{ 'Switzer-Regular.woff2' | asset_url }}) format('woff2'),
          url({{ 'Switzer-Regular.woff' | asset_url }}) format('woff');
      font-weight: normal;
      font-style: normal;
      font-display: swap;
  }

  @font-face {
      font-family: 'Switzer';
      src: url({{ 'Switzer-Thin.woff2' | asset_url }}) format('woff2'),
          url({{ 'Switzer-Thin.woff' | asset_url }}) format('woff');
      font-weight: 100;
      font-style: normal;
      font-display: swap;
  }

  @font-face {
      font-family: 'Switzer';
      src: url({{ 'Switzer-SemiboldItalic.woff2' | asset_url }}) format('woff2'),
          url({{ 'Switzer-SemiboldItalic.woff' | asset_url }}) format('woff');
      font-weight: 600;
      font-style: italic;
      font-display: swap;
  }

  @font-face {
      font-family: 'Switzer';
      src: url({{ 'Switzer-ThinItalic.woff2' | asset_url }}) format('woff2'),
          url({{ 'Switzer-ThinItalic.woff' | asset_url }}) format('woff');
      font-weight: 100;
      font-style: italic;
      font-display: swap;
  }





  {% for scheme in settings.color_schemes -%}
    {% assign scheme_classes = scheme_classes | append: ', .color-' | append: scheme.id %}
    {% if forloop.index == 1 -%}
      :root,
    {%- endif %}
    .color-{{ scheme.id }} {
      --color-background: {{ scheme.settings.background.red }},{{ scheme.settings.background.green }},{{ scheme.settings.background.blue }};
    {% if scheme.settings.background_gradient != empty %}
      --gradient-background: {{ scheme.settings.background_gradient }};
    {% else %}
      --gradient-background: {{ scheme.settings.background }};
    {% endif %}
    --color-foreground: {{ scheme.settings.text.red }},{{ scheme.settings.text.green }},{{ scheme.settings.text.blue }};
    --inner-block-background:{{ scheme.settings.inner_block_bg }};
    --color-shadow: {{ scheme.settings.shadow.red }},{{ scheme.settings.shadow.green }},{{ scheme.settings.shadow.blue }};
    --color-button: {{ scheme.settings.button.red }},{{ scheme.settings.button.green }},{{ scheme.settings.button.blue }};
    --color-button-text: {{ scheme.settings.button_label.red }},{{ scheme.settings.button_label.green }},{{ scheme.settings.button_label.blue }};
    --color-secondary-button: {{ scheme.settings.background.red }},{{ scheme.settings.background.green }},{{ scheme.settings.background.blue }};
    --color-secondary-button-text: {{ scheme.settings.secondary_button_label.red }},{{ scheme.settings.secondary_button_label.green }},{{ scheme.settings.secondary_button_label.blue }};
    --color-link: {{ scheme.settings.secondary_button_label.red }},{{ scheme.settings.secondary_button_label.green }},{{ scheme.settings.secondary_button_label.blue }};
    --color-badge-foreground: {{ scheme.settings.text.red }},{{ scheme.settings.text.green }},{{ scheme.settings.text.blue }};
    --color-badge-background: {{ scheme.settings.background.red }},{{ scheme.settings.background.green }},{{ scheme.settings.background.blue }};
    --color-badge-border: {{ scheme.settings.text.red }},{{ scheme.settings.text.green }},{{ scheme.settings.text.blue }};
    --payment-terms-background-color: rgb({{ scheme.settings.background.rgb }});
    --border-color: rgb({{ scheme.settings.border.rgb }});
    --progress-bar:{{ scheme.settings.progress_bar }};
    --progress-bar-icon:{{ scheme.settings.progress_bar_icon }};
  }
  {% endfor %}

  {{ scheme_classes | prepend: 'body' }} {
    color: rgba(var(--color-foreground));
    background-color: rgb(var(--color-background));
  }

  :root {
   {% if settings.custom_body_font == 'none' %}
      --font-body-family: {{ settings.type_body_font.family }}, {{ settings.type_body_font.fallback_families }};
      --font-body-style: {{ settings.type_body_font.style }};
      --font-body-weight: {{ settings.type_body_font.weight }};
      --font-body-weight-bold: {{ settings.type_body_font.weight | plus: 300 | at_most: 1000 }};
    {%- else -%}
      --font-body-family: {{ settings.custom_body_font }};
      --font-body-weight: {{ settings.custom_body_weight }};
    {% endif %}

    {% if settings.custom_header_font == 'none' %}
      --font-heading-family: {{ settings.type_header_font.family }}, {{ settings.type_header_font.fallback_families }};
      --font-heading-style: {{ settings.type_header_font.style }};
      --font-heading-weight: {{ settings.type_header_font.weight }};
    {%- else -%}
      --font-heading-family: {{ settings.custom_header_font }};
      --font-heading-weight: {{ settings.custom_header_weight }};
    {% endif %}

    --font-body-scale: {{ settings.body_scale | divided_by: 100.0 }};
    --font-heading-scale: {{ settings.heading_scale | times: 1.0 | divided_by: settings.body_scale }};

    --media-padding: {{ settings.media_padding }}px;
    --media-border-opacity: {{ settings.media_border_opacity | divided_by: 100.0 }};
    --media-border-width: {{ settings.media_border_thickness }}px;
    --media-radius: {{ settings.media_radius }}px;
    --media-shadow-opacity: {{ settings.media_shadow_opacity | divided_by: 100.0 }};
    --media-shadow-horizontal-offset: {{ settings.media_shadow_horizontal_offset }}px;
    --media-shadow-vertical-offset: {{ settings.media_shadow_vertical_offset }}px;
    --media-shadow-blur-radius: {{ settings.media_shadow_blur }}px;
    --media-shadow-visible: {% if settings.media_shadow_opacity > 0 %}1{% else %}0{% endif %};

    --page-width: {{ settings.page_width | divided_by: 10 }}rem;
    --page-width-margin: {% if settings.page_width == '1600' %}2{% else %}0{% endif %}rem;

    --product-card-image-padding: {{ settings.card_image_padding | divided_by: 10.0 }}rem;
    --product-card-corner-radius: {{ settings.card_corner_radius | divided_by: 10.0 }}rem;
    --product-card-text-alignment: {{ settings.card_text_alignment }};
    --product-card-border-width: {{ settings.card_border_thickness | divided_by: 10.0 }}rem;
    --product-card-border-opacity: {{ settings.card_border_opacity | divided_by: 100.0 }};
    --product-card-shadow-opacity: {{ settings.card_shadow_opacity | divided_by: 100.0 }};
    --product-card-shadow-visible: {% if settings.card_shadow_opacity > 0 %}1{% else %}0{% endif %};
    --product-card-shadow-horizontal-offset: {{ settings.card_shadow_horizontal_offset | divided_by: 10.0 }}rem;
    --product-card-shadow-vertical-offset: {{ settings.card_shadow_vertical_offset | divided_by: 10.0 }}rem;
    --product-card-shadow-blur-radius: {{ settings.card_shadow_blur | divided_by: 10.0 }}rem;

    --collection-card-image-padding: {{ settings.collection_card_image_padding | divided_by: 10.0 }}rem;
    --collection-card-corner-radius: {{ settings.collection_card_corner_radius | divided_by: 10.0 }}rem;
    --collection-card-text-alignment: {{ settings.collection_card_text_alignment }};
    --collection-card-border-width: {{ settings.collection_card_border_thickness | divided_by: 10.0 }}rem;
    --collection-card-border-opacity: {{ settings.collection_card_border_opacity | divided_by: 100.0 }};
    --collection-card-shadow-opacity: {{ settings.collection_card_shadow_opacity | divided_by: 100.0 }};
    --collection-card-shadow-visible: {% if settings.collection_card_shadow_opacity > 0 %}1{% else %}0{% endif %};
    --collection-card-shadow-horizontal-offset: {{ settings.collection_card_shadow_horizontal_offset | divided_by: 10.0 }}rem;
    --collection-card-shadow-vertical-offset: {{ settings.collection_card_shadow_vertical_offset | divided_by: 10.0 }}rem;
    --collection-card-shadow-blur-radius: {{ settings.collection_card_shadow_blur | divided_by: 10.0 }}rem;

    --blog-card-image-padding: {{ settings.blog_card_image_padding | divided_by: 10.0 }}rem;
    --blog-card-corner-radius: {{ settings.blog_card_corner_radius | divided_by: 10.0 }}rem;
    --blog-card-text-alignment: {{ settings.blog_card_text_alignment }};
    --blog-card-border-width: {{ settings.blog_card_border_thickness | divided_by: 10.0 }}rem;
    --blog-card-border-opacity: {{ settings.blog_card_border_opacity | divided_by: 100.0 }};
    --blog-card-shadow-opacity: {{ settings.blog_card_shadow_opacity | divided_by: 100.0 }};
    --blog-card-shadow-visible: {% if settings.blog_card_shadow_opacity > 0 %}1{% else %}0{% endif %};
    --blog-card-shadow-horizontal-offset: {{ settings.blog_card_shadow_horizontal_offset | divided_by: 10.0 }}rem;
    --blog-card-shadow-vertical-offset: {{ settings.blog_card_shadow_vertical_offset | divided_by: 10.0 }}rem;
    --blog-card-shadow-blur-radius: {{ settings.blog_card_shadow_blur | divided_by: 10.0 }}rem;

    --badge-corner-radius: {{ settings.badge_corner_radius | divided_by: 10.0 }}rem;

    --popup-border-width: {{ settings.popup_border_thickness }}px;
    --popup-border-opacity: {{ settings.popup_border_opacity | divided_by: 100.0 }};
    --popup-corner-radius: {{ settings.popup_corner_radius }}px;
    --popup-shadow-opacity: {{ settings.popup_shadow_opacity | divided_by: 100.0 }};
    --popup-shadow-horizontal-offset: {{ settings.popup_shadow_horizontal_offset }}px;
    --popup-shadow-vertical-offset: {{ settings.popup_shadow_vertical_offset }}px;
    --popup-shadow-blur-radius: {{ settings.popup_shadow_blur }}px;

    --drawer-border-width: {{ settings.drawer_border_thickness }}px;
    --drawer-border-opacity: {{ settings.drawer_border_opacity | divided_by: 100.0 }};
    --drawer-shadow-opacity: {{ settings.drawer_shadow_opacity | divided_by: 100.0 }};
    --drawer-shadow-horizontal-offset: {{ settings.drawer_shadow_horizontal_offset }}px;
    --drawer-shadow-vertical-offset: {{ settings.drawer_shadow_vertical_offset }}px;
    --drawer-shadow-blur-radius: {{ settings.drawer_shadow_blur }}px;

    --spacing-sections-desktop: {{ settings.spacing_sections }}px;
    --spacing-sections-mobile: {% if settings.spacing_sections < 24 %}{{ settings.spacing_sections }}{% else %}{{ settings.spacing_sections | times: 0.7 | round | at_least: 20 }}{% endif %}px;

    --grid-desktop-vertical-spacing: {{ settings.spacing_grid_vertical }}px;
    --grid-desktop-horizontal-spacing: {{ settings.spacing_grid_horizontal }}px;
    --grid-mobile-vertical-spacing: {{ settings.spacing_grid_vertical | divided_by: 2 }}px;
    --grid-mobile-horizontal-spacing: {{ settings.spacing_grid_horizontal | divided_by: 2 }}px;

    --text-boxes-border-opacity: {{ settings.text_boxes_border_opacity | divided_by: 100.0 }};
    --text-boxes-border-width: {{ settings.text_boxes_border_thickness }}px;
    --text-boxes-radius: {{ settings.text_boxes_radius }}px;
    --text-boxes-shadow-opacity: {{ settings.text_boxes_shadow_opacity | divided_by: 100.0 }};
    --text-boxes-shadow-visible: {% if settings.text_boxes_shadow_opacity > 0 %}1{% else %}0{% endif %};
    --text-boxes-shadow-horizontal-offset: {{ settings.text_boxes_shadow_horizontal_offset }}px;
    --text-boxes-shadow-vertical-offset: {{ settings.text_boxes_shadow_vertical_offset }}px;
    --text-boxes-shadow-blur-radius: {{ settings.text_boxes_shadow_blur }}px;

    --buttons-radius: {{ settings.buttons_radius }}px;
    --buttons-radius-outset: {% if settings.buttons_radius > 0 %}{{ settings.buttons_radius | plus: settings.buttons_border_thickness }}{% else %}0{% endif %}px;
    --buttons-border-width: {% if settings.buttons_border_opacity > 0 %}{{ settings.buttons_border_thickness }}{% else %}0{% endif %}px;
    --buttons-border-opacity: {{ settings.buttons_border_opacity | divided_by: 100.0 }};
    --buttons-shadow-opacity: {{ settings.buttons_shadow_opacity | divided_by: 100.0 }};
    --buttons-shadow-visible: {% if settings.buttons_shadow_opacity > 0 %}1{% else %}0{% endif %};
    --buttons-shadow-horizontal-offset: {{ settings.buttons_shadow_horizontal_offset }}px;
    --buttons-shadow-vertical-offset: {{ settings.buttons_shadow_vertical_offset }}px;
    --buttons-shadow-blur-radius: {{ settings.buttons_shadow_blur }}px;
    --buttons-border-offset: {% if settings.buttons_radius > 0 or settings.buttons_shadow_opacity > 0 %}0.3{% else %}0{% endif %}px;

    --inputs-radius: {{ settings.inputs_radius }}px;
    --inputs-border-width: {{ settings.inputs_border_thickness }}px;
    --inputs-border-opacity: {{ settings.inputs_border_opacity | divided_by: 100.0 }};
    --inputs-shadow-opacity: {{ settings.inputs_shadow_opacity | divided_by: 100.0 }};
    --inputs-shadow-horizontal-offset: {{ settings.inputs_shadow_horizontal_offset }}px;
    --inputs-margin-offset: {% if settings.inputs_shadow_vertical_offset != 0 and settings.inputs_shadow_opacity > 0 %}{{ settings.inputs_shadow_vertical_offset | abs }}{% else %}0{% endif %}px;
    --inputs-shadow-vertical-offset: {{ settings.inputs_shadow_vertical_offset }}px;
    --inputs-shadow-blur-radius: {{ settings.inputs_shadow_blur }}px;
    --inputs-radius-outset: {% if settings.inputs_radius > 0 %}{{ settings.inputs_radius | plus: settings.inputs_border_thickness }}{% else %}0{% endif %}px;

    --variant-pills-radius: {{ settings.variant_pills_radius }}px;
    --variant-pills-border-width: {{ settings.variant_pills_border_thickness }}px;
    --variant-pills-border-opacity: {{ settings.variant_pills_border_opacity | divided_by: 100.0 }};
    --variant-pills-shadow-opacity: {{ settings.variant_pills_shadow_opacity | divided_by: 100.0 }};
    --variant-pills-shadow-horizontal-offset: {{ settings.variant_pills_shadow_horizontal_offset }}px;
    --variant-pills-shadow-vertical-offset: {{ settings.variant_pills_shadow_vertical_offset }}px;
    --variant-pills-shadow-blur-radius: {{ settings.variant_pills_shadow_blur }}px;
  }

  *,
  *::before,
  *::after {
    box-sizing: inherit;
  }

  html {
    box-sizing: border-box;
    font-size: calc(var(--font-body-scale) * 62.5%);
    height: 100%;
  }

  body {
    display: grid;
    grid-template-rows: auto auto 1fr auto;
    grid-template-columns: 100%;
    min-height: 100%;
    margin: 0;
    font-size: 1.6rem;
    letter-spacing: 0.064rem;
    line-height: 120%;
    font-family: var(--font-body-family);
    font-style: var(--font-body-style);
    font-weight: var(--font-body-weight);
  }

  @media screen and (min-width: 750px) {
    body {
      font-size: 1.6rem;
    }
  }
{% endstyle %}

{{ 'flickity.css' | asset_url | stylesheet_tag }}
{{ 'base.css' | asset_url | stylesheet_tag }}
{{ 'custom.css' | asset_url | stylesheet_tag }}

{%- unless settings.type_body_font.system? -%}
  <link rel="preload" as="font" href="{{ settings.type_body_font | font_url }}" type="font/woff2" crossorigin>
{%- endunless -%}
{%- unless settings.type_header_font.system? -%}
  <link rel="preload" as="font" href="{{ settings.type_header_font | font_url }}" type="font/woff2" crossorigin>
{%- endunless -%}
<style>
  canvas {
    background:white;
  }
  div#canvas_div {
    display: flex;
    flex-direction: column;
    align-content: center;
    flex-wrap: wrap;
    margin: 3rem auto;
  }

  .canvas-action--wrapper {
    margin-top: 10px;
    display: flex;
    flex-wrap: nowrap;
    justify-content: center;
    gap: 10px;
  }
  .dropdown-container{
    display:flex;
    align-items:center;
    white-space:nowrap;
  }
  .dropdown-container .select{
    margin-left: 1rem;
    margin-right: 2rem;
  }
  .dropdown-container .select__select{
    font-size: 1.4rem;
    padding-left: 1rem;
  }
  .dropdown-container .select .icon-caret{
    height: 1.6rem;
    top: calc(50% - 0.8rem);
  }
</style>

<div id="canvas_div">
  <div class="canwas--wrapper">
    <canvas id="canvas" width="900" height="600"></canvas>
    <div class="clear"></div>
  </div>
  <div class="canvas-action--wrapper">
    <div class="dropdown-container">
      <label for="selWidth">Line width :</label>
      <div class="select">
        <select class="select__select" name="selWidth" id="selWidth">
          {% for i in (10..16) %}
              <option value="{{ i }}">{{ i }}</option>
          {% endfor %}
        </select>
        {% render 'icon-caret' %}
      </div>
    </div>
    <div class="dropdown-container">
      <label for="selColor">Color :</label>
      <div class="select">
        <select class="select__select" name="selColor" id="selColor">
          <option value="black">black</option>
          <option value="blue" selected="selected">blue</option>
          <option value="red">red</option>
          <option value="green">green</option>
          <option value="yellow">yellow</option>
          <option value="gray">gray</option>
        </select>
        {% render 'icon-caret' %}
      </div>
    </div>   
    <button class="button button--secondary" onclick="javascript:clearArea();return false;">Clear</button>
    <button class="button button--primary" onclick="window.top.close();">Close</button>
  </div>
</div>

<script>

  const canvas = document.getElementById('canvas');
  const context = canvas.getContext('2d');
  let isDrawing = false;
  let x = 0;
  let y = 0;
  var offsetX;
  var offsetY;

  {% comment %} document.querySelector('.j-trigger').onclick = () => {
  let canvasElement = document.getElementById('canvas_div');
  canvasElement.style.display = (canvasElement.style.getPropertyValue("display") == "none") ? "block":"none";
  } {% endcomment %}

  function startup() {
  canvas.addEventListener('touchstart', handleStart);
  canvas.addEventListener('touchend', handleEnd);
  canvas.addEventListener('touchcancel', handleCancel);
  canvas.addEventListener('touchmove', handleMove);
  canvas.addEventListener('mousedown', (e) => {
    x = e.offsetX;
    y = e.offsetY;
    isDrawing = true;
  });

  canvas.addEventListener('mousemove', (e) => {
    if (isDrawing) {
      drawLine(context, x, y, e.offsetX, e.offsetY);
      x = e.offsetX;
      y = e.offsetY;
    }
  });

  canvas.addEventListener('mouseup', (e) => {
    if (isDrawing) {
      drawLine(context, x, y, e.offsetX, e.offsetY);
      x = 0;
      y = 0;
      isDrawing = false;
    }
  });
  }

  document.addEventListener("DOMContentLoaded", startup);

  const ongoingTouches = [];

  function handleStart(evt) {
  evt.preventDefault();
  const touches = evt.changedTouches;
  offsetX = canvas.getBoundingClientRect().left;
  offsetY = canvas.getBoundingClientRect().top;
  for (let i = 0; i < touches.length; i++) {
    ongoingTouches.push(copyTouch(touches[i]));
  }
  }

  function handleMove(evt) {
  evt.preventDefault();
  const touches = evt.changedTouches;
  for (let i = 0; i < touches.length; i++) {
    const color = document.getElementById('selColor').value;
    const idx = ongoingTouchIndexById(touches[i].identifier);
    if (idx >= 0) {
      context.beginPath();
      context.moveTo(ongoingTouches[idx].clientX - offsetX, ongoingTouches[idx].clientY - offsetY);
      context.lineTo(touches[i].clientX - offsetX, touches[i].clientY - offsetY);
      context.lineWidth = document.getElementById('selWidth').value;
      context.strokeStyle = color;
      context.lineJoin = "round";
      context.closePath();
      context.stroke();
      ongoingTouches.splice(idx, 1, copyTouch(touches[i]));  // swap in the new touch record
    }
  }
  }

  function handleEnd(evt) {
  evt.preventDefault();
  const touches = evt.changedTouches;
  for (let i = 0; i < touches.length; i++) {
    const color = document.getElementById('selColor').value;
    let idx = ongoingTouchIndexById(touches[i].identifier);
    if (idx >= 0) {
      context.lineWidth = document.getElementById('selWidth').value;
      context.fillStyle = color;
      ongoingTouches.splice(idx, 1);  // remove it; we're done
    }
  }
  }

  function handleCancel(evt) {
  evt.preventDefault();
  const touches = evt.changedTouches;
  for (let i = 0; i < touches.length; i++) {
    let idx = ongoingTouchIndexById(touches[i].identifier);
    ongoingTouches.splice(idx, 1);  // remove it; we're done
  }
  }

  function copyTouch({ identifier, clientX, clientY }) {
  return { identifier, clientX, clientY };
  }

  function ongoingTouchIndexById(idToFind) {
  for (let i = 0; i < ongoingTouches.length; i++) {
    const id = ongoingTouches[i].identifier;
    if (id === idToFind) {
      return i;
    }
  }
  return -1;    // not found
  }

  function drawLine(context, x1, y1, x2, y2) {
  context.beginPath();
  context.strokeStyle = document.getElementById('selColor').value;
  context.lineWidth = document.getElementById('selWidth').value;
  context.lineJoin = "round";
  context.moveTo(x1, y1);
  context.lineTo(x2, y2);
  context.closePath();
  context.stroke();
  }

  function clearArea() {
    context.setTransform(1, 0, 0, 1, 0, 0);
    context.clearRect(0, 0, context.canvas.width, context.canvas.height);
  }
</script>